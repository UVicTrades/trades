/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 220.0, "minX": 0.0, "maxY": 4991.0, "series": [{"data": [[0.0, 220.0], [0.1, 225.0], [0.2, 350.0], [0.3, 350.0], [0.4, 367.0], [0.5, 368.0], [0.6, 385.0], [0.7, 400.0], [0.8, 408.0], [0.9, 412.0], [1.0, 414.0], [1.1, 428.0], [1.2, 443.0], [1.3, 464.0], [1.4, 464.0], [1.5, 465.0], [1.6, 474.0], [1.7, 478.0], [1.8, 490.0], [1.9, 495.0], [2.0, 511.0], [2.1, 516.0], [2.2, 529.0], [2.3, 534.0], [2.4, 541.0], [2.5, 545.0], [2.6, 558.0], [2.7, 559.0], [2.8, 560.0], [2.9, 573.0], [3.0, 576.0], [3.1, 579.0], [3.2, 580.0], [3.3, 582.0], [3.4, 585.0], [3.5, 588.0], [3.6, 596.0], [3.7, 597.0], [3.8, 601.0], [3.9, 603.0], [4.0, 606.0], [4.1, 608.0], [4.2, 610.0], [4.3, 614.0], [4.4, 631.0], [4.5, 635.0], [4.6, 639.0], [4.7, 648.0], [4.8, 652.0], [4.9, 665.0], [5.0, 669.0], [5.1, 675.0], [5.2, 691.0], [5.3, 697.0], [5.4, 698.0], [5.5, 699.0], [5.6, 713.0], [5.7, 714.0], [5.8, 722.0], [5.9, 723.0], [6.0, 723.0], [6.1, 729.0], [6.2, 729.0], [6.3, 738.0], [6.4, 743.0], [6.5, 745.0], [6.6, 748.0], [6.7, 753.0], [6.8, 755.0], [6.9, 759.0], [7.0, 776.0], [7.1, 778.0], [7.2, 784.0], [7.3, 790.0], [7.4, 794.0], [7.5, 796.0], [7.6, 805.0], [7.7, 816.0], [7.8, 830.0], [7.9, 842.0], [8.0, 846.0], [8.1, 849.0], [8.2, 862.0], [8.3, 890.0], [8.4, 891.0], [8.5, 892.0], [8.6, 907.0], [8.7, 916.0], [8.8, 917.0], [8.9, 936.0], [9.0, 937.0], [9.1, 938.0], [9.2, 945.0], [9.3, 960.0], [9.4, 960.0], [9.5, 972.0], [9.6, 979.0], [9.7, 980.0], [9.8, 995.0], [9.9, 1000.0], [10.0, 1001.0], [10.1, 1004.0], [10.2, 1013.0], [10.3, 1031.0], [10.4, 1033.0], [10.5, 1037.0], [10.6, 1042.0], [10.7, 1046.0], [10.8, 1074.0], [10.9, 1076.0], [11.0, 1092.0], [11.1, 1093.0], [11.2, 1100.0], [11.3, 1121.0], [11.4, 1123.0], [11.5, 1126.0], [11.6, 1131.0], [11.7, 1139.0], [11.8, 1143.0], [11.9, 1145.0], [12.0, 1148.0], [12.1, 1152.0], [12.2, 1159.0], [12.3, 1163.0], [12.4, 1164.0], [12.5, 1166.0], [12.6, 1170.0], [12.7, 1184.0], [12.8, 1186.0], [12.9, 1187.0], [13.0, 1192.0], [13.1, 1195.0], [13.2, 1195.0], [13.3, 1196.0], [13.4, 1196.0], [13.5, 1198.0], [13.6, 1201.0], [13.7, 1216.0], [13.8, 1217.0], [13.9, 1224.0], [14.0, 1229.0], [14.1, 1239.0], [14.2, 1243.0], [14.3, 1247.0], [14.4, 1253.0], [14.5, 1266.0], [14.6, 1267.0], [14.7, 1270.0], [14.8, 1273.0], [14.9, 1275.0], [15.0, 1281.0], [15.1, 1289.0], [15.2, 1290.0], [15.3, 1291.0], [15.4, 1307.0], [15.5, 1322.0], [15.6, 1329.0], [15.7, 1332.0], [15.8, 1333.0], [15.9, 1336.0], [16.0, 1338.0], [16.1, 1345.0], [16.2, 1345.0], [16.3, 1346.0], [16.4, 1352.0], [16.5, 1354.0], [16.6, 1370.0], [16.7, 1375.0], [16.8, 1380.0], [16.9, 1381.0], [17.0, 1387.0], [17.1, 1394.0], [17.2, 1397.0], [17.3, 1398.0], [17.4, 1400.0], [17.5, 1408.0], [17.6, 1414.0], [17.7, 1439.0], [17.8, 1441.0], [17.9, 1442.0], [18.0, 1443.0], [18.1, 1444.0], [18.2, 1445.0], [18.3, 1452.0], [18.4, 1457.0], [18.5, 1457.0], [18.6, 1458.0], [18.7, 1466.0], [18.8, 1468.0], [18.9, 1475.0], [19.0, 1481.0], [19.1, 1484.0], [19.2, 1486.0], [19.3, 1488.0], [19.4, 1488.0], [19.5, 1491.0], [19.6, 1502.0], [19.7, 1502.0], [19.8, 1505.0], [19.9, 1509.0], [20.0, 1511.0], [20.1, 1513.0], [20.2, 1516.0], [20.3, 1517.0], [20.4, 1521.0], [20.5, 1521.0], [20.6, 1522.0], [20.7, 1523.0], [20.8, 1526.0], [20.9, 1526.0], [21.0, 1529.0], [21.1, 1533.0], [21.2, 1538.0], [21.3, 1539.0], [21.4, 1541.0], [21.5, 1541.0], [21.6, 1543.0], [21.7, 1544.0], [21.8, 1548.0], [21.9, 1550.0], [22.0, 1552.0], [22.1, 1556.0], [22.2, 1558.0], [22.3, 1558.0], [22.4, 1561.0], [22.5, 1561.0], [22.6, 1562.0], [22.7, 1564.0], [22.8, 1572.0], [22.9, 1572.0], [23.0, 1573.0], [23.1, 1574.0], [23.2, 1575.0], [23.3, 1580.0], [23.4, 1581.0], [23.5, 1582.0], [23.6, 1586.0], [23.7, 1587.0], [23.8, 1588.0], [23.9, 1588.0], [24.0, 1594.0], [24.1, 1597.0], [24.2, 1605.0], [24.3, 1605.0], [24.4, 1606.0], [24.5, 1609.0], [24.6, 1612.0], [24.7, 1612.0], [24.8, 1613.0], [24.9, 1623.0], [25.0, 1625.0], [25.1, 1625.0], [25.2, 1633.0], [25.3, 1634.0], [25.4, 1634.0], [25.5, 1637.0], [25.6, 1638.0], [25.7, 1639.0], [25.8, 1645.0], [25.9, 1650.0], [26.0, 1658.0], [26.1, 1661.0], [26.2, 1670.0], [26.3, 1676.0], [26.4, 1681.0], [26.5, 1687.0], [26.6, 1687.0], [26.7, 1688.0], [26.8, 1692.0], [26.9, 1692.0], [27.0, 1695.0], [27.1, 1696.0], [27.2, 1698.0], [27.3, 1704.0], [27.4, 1705.0], [27.5, 1710.0], [27.6, 1712.0], [27.7, 1712.0], [27.8, 1714.0], [27.9, 1718.0], [28.0, 1724.0], [28.1, 1724.0], [28.2, 1728.0], [28.3, 1729.0], [28.4, 1736.0], [28.5, 1736.0], [28.6, 1737.0], [28.7, 1745.0], [28.8, 1745.0], [28.9, 1753.0], [29.0, 1753.0], [29.1, 1758.0], [29.2, 1762.0], [29.3, 1763.0], [29.4, 1769.0], [29.5, 1770.0], [29.6, 1774.0], [29.7, 1774.0], [29.8, 1776.0], [29.9, 1776.0], [30.0, 1778.0], [30.1, 1779.0], [30.2, 1783.0], [30.3, 1784.0], [30.4, 1784.0], [30.5, 1785.0], [30.6, 1786.0], [30.7, 1789.0], [30.8, 1791.0], [30.9, 1800.0], [31.0, 1802.0], [31.1, 1802.0], [31.2, 1803.0], [31.3, 1804.0], [31.4, 1805.0], [31.5, 1806.0], [31.6, 1806.0], [31.7, 1808.0], [31.8, 1809.0], [31.9, 1809.0], [32.0, 1810.0], [32.1, 1811.0], [32.2, 1818.0], [32.3, 1818.0], [32.4, 1820.0], [32.5, 1822.0], [32.6, 1825.0], [32.7, 1831.0], [32.8, 1833.0], [32.9, 1834.0], [33.0, 1834.0], [33.1, 1836.0], [33.2, 1840.0], [33.3, 1842.0], [33.4, 1845.0], [33.5, 1845.0], [33.6, 1861.0], [33.7, 1866.0], [33.8, 1867.0], [33.9, 1873.0], [34.0, 1881.0], [34.1, 1881.0], [34.2, 1881.0], [34.3, 1883.0], [34.4, 1883.0], [34.5, 1887.0], [34.6, 1892.0], [34.7, 1892.0], [34.8, 1900.0], [34.9, 1901.0], [35.0, 1901.0], [35.1, 1908.0], [35.2, 1908.0], [35.3, 1909.0], [35.4, 1910.0], [35.5, 1910.0], [35.6, 1913.0], [35.7, 1914.0], [35.8, 1918.0], [35.9, 1921.0], [36.0, 1922.0], [36.1, 1922.0], [36.2, 1922.0], [36.3, 1928.0], [36.4, 1931.0], [36.5, 1934.0], [36.6, 1938.0], [36.7, 1939.0], [36.8, 1940.0], [36.9, 1941.0], [37.0, 1943.0], [37.1, 1943.0], [37.2, 1945.0], [37.3, 1949.0], [37.4, 1949.0], [37.5, 1949.0], [37.6, 1950.0], [37.7, 1951.0], [37.8, 1954.0], [37.9, 1956.0], [38.0, 1958.0], [38.1, 1964.0], [38.2, 1968.0], [38.3, 1968.0], [38.4, 1980.0], [38.5, 1981.0], [38.6, 1982.0], [38.7, 1987.0], [38.8, 1989.0], [38.9, 1992.0], [39.0, 1992.0], [39.1, 1993.0], [39.2, 1995.0], [39.3, 1995.0], [39.4, 2006.0], [39.5, 2009.0], [39.6, 2010.0], [39.7, 2013.0], [39.8, 2018.0], [39.9, 2019.0], [40.0, 2021.0], [40.1, 2022.0], [40.2, 2023.0], [40.3, 2027.0], [40.4, 2028.0], [40.5, 2029.0], [40.6, 2029.0], [40.7, 2032.0], [40.8, 2034.0], [40.9, 2035.0], [41.0, 2035.0], [41.1, 2037.0], [41.2, 2040.0], [41.3, 2041.0], [41.4, 2042.0], [41.5, 2043.0], [41.6, 2050.0], [41.7, 2051.0], [41.8, 2052.0], [41.9, 2052.0], [42.0, 2055.0], [42.1, 2056.0], [42.2, 2060.0], [42.3, 2070.0], [42.4, 2070.0], [42.5, 2070.0], [42.6, 2072.0], [42.7, 2075.0], [42.8, 2077.0], [42.9, 2079.0], [43.0, 2080.0], [43.1, 2082.0], [43.2, 2083.0], [43.3, 2083.0], [43.4, 2084.0], [43.5, 2084.0], [43.6, 2085.0], [43.7, 2087.0], [43.8, 2088.0], [43.9, 2090.0], [44.0, 2095.0], [44.1, 2097.0], [44.2, 2097.0], [44.3, 2098.0], [44.4, 2101.0], [44.5, 2102.0], [44.6, 2104.0], [44.7, 2106.0], [44.8, 2108.0], [44.9, 2112.0], [45.0, 2114.0], [45.1, 2117.0], [45.2, 2118.0], [45.3, 2122.0], [45.4, 2123.0], [45.5, 2126.0], [45.6, 2128.0], [45.7, 2132.0], [45.8, 2136.0], [45.9, 2137.0], [46.0, 2137.0], [46.1, 2138.0], [46.2, 2140.0], [46.3, 2142.0], [46.4, 2143.0], [46.5, 2144.0], [46.6, 2145.0], [46.7, 2145.0], [46.8, 2146.0], [46.9, 2148.0], [47.0, 2152.0], [47.1, 2154.0], [47.2, 2157.0], [47.3, 2158.0], [47.4, 2163.0], [47.5, 2168.0], [47.6, 2172.0], [47.7, 2173.0], [47.8, 2178.0], [47.9, 2180.0], [48.0, 2183.0], [48.1, 2184.0], [48.2, 2185.0], [48.3, 2188.0], [48.4, 2191.0], [48.5, 2196.0], [48.6, 2199.0], [48.7, 2200.0], [48.8, 2205.0], [48.9, 2205.0], [49.0, 2207.0], [49.1, 2208.0], [49.2, 2213.0], [49.3, 2215.0], [49.4, 2218.0], [49.5, 2221.0], [49.6, 2221.0], [49.7, 2225.0], [49.8, 2225.0], [49.9, 2225.0], [50.0, 2231.0], [50.1, 2234.0], [50.2, 2239.0], [50.3, 2242.0], [50.4, 2244.0], [50.5, 2246.0], [50.6, 2251.0], [50.7, 2252.0], [50.8, 2254.0], [50.9, 2257.0], [51.0, 2258.0], [51.1, 2260.0], [51.2, 2262.0], [51.3, 2262.0], [51.4, 2265.0], [51.5, 2265.0], [51.6, 2266.0], [51.7, 2271.0], [51.8, 2273.0], [51.9, 2274.0], [52.0, 2274.0], [52.1, 2281.0], [52.2, 2282.0], [52.3, 2283.0], [52.4, 2285.0], [52.5, 2290.0], [52.6, 2296.0], [52.7, 2296.0], [52.8, 2297.0], [52.9, 2300.0], [53.0, 2306.0], [53.1, 2312.0], [53.2, 2312.0], [53.3, 2320.0], [53.4, 2326.0], [53.5, 2330.0], [53.6, 2334.0], [53.7, 2338.0], [53.8, 2341.0], [53.9, 2343.0], [54.0, 2345.0], [54.1, 2346.0], [54.2, 2349.0], [54.3, 2358.0], [54.4, 2359.0], [54.5, 2364.0], [54.6, 2365.0], [54.7, 2365.0], [54.8, 2368.0], [54.9, 2371.0], [55.0, 2374.0], [55.1, 2374.0], [55.2, 2375.0], [55.3, 2375.0], [55.4, 2376.0], [55.5, 2390.0], [55.6, 2391.0], [55.7, 2394.0], [55.8, 2394.0], [55.9, 2402.0], [56.0, 2403.0], [56.1, 2405.0], [56.2, 2407.0], [56.3, 2410.0], [56.4, 2410.0], [56.5, 2412.0], [56.6, 2412.0], [56.7, 2415.0], [56.8, 2418.0], [56.9, 2422.0], [57.0, 2427.0], [57.1, 2428.0], [57.2, 2431.0], [57.3, 2432.0], [57.4, 2436.0], [57.5, 2437.0], [57.6, 2437.0], [57.7, 2438.0], [57.8, 2440.0], [57.9, 2444.0], [58.0, 2445.0], [58.1, 2450.0], [58.2, 2453.0], [58.3, 2461.0], [58.4, 2461.0], [58.5, 2461.0], [58.6, 2465.0], [58.7, 2466.0], [58.8, 2468.0], [58.9, 2472.0], [59.0, 2474.0], [59.1, 2474.0], [59.2, 2478.0], [59.3, 2478.0], [59.4, 2478.0], [59.5, 2485.0], [59.6, 2489.0], [59.7, 2497.0], [59.8, 2510.0], [59.9, 2510.0], [60.0, 2511.0], [60.1, 2512.0], [60.2, 2514.0], [60.3, 2518.0], [60.4, 2520.0], [60.5, 2520.0], [60.6, 2533.0], [60.7, 2535.0], [60.8, 2537.0], [60.9, 2538.0], [61.0, 2538.0], [61.1, 2539.0], [61.2, 2544.0], [61.3, 2544.0], [61.4, 2548.0], [61.5, 2549.0], [61.6, 2555.0], [61.7, 2556.0], [61.8, 2565.0], [61.9, 2572.0], [62.0, 2580.0], [62.1, 2580.0], [62.2, 2583.0], [62.3, 2587.0], [62.4, 2589.0], [62.5, 2589.0], [62.6, 2596.0], [62.7, 2606.0], [62.8, 2608.0], [62.9, 2612.0], [63.0, 2613.0], [63.1, 2618.0], [63.2, 2622.0], [63.3, 2623.0], [63.4, 2625.0], [63.5, 2632.0], [63.6, 2633.0], [63.7, 2633.0], [63.8, 2639.0], [63.9, 2644.0], [64.0, 2644.0], [64.1, 2647.0], [64.2, 2647.0], [64.3, 2662.0], [64.4, 2662.0], [64.5, 2666.0], [64.6, 2671.0], [64.7, 2671.0], [64.8, 2673.0], [64.9, 2673.0], [65.0, 2674.0], [65.1, 2675.0], [65.2, 2676.0], [65.3, 2678.0], [65.4, 2679.0], [65.5, 2681.0], [65.6, 2688.0], [65.7, 2694.0], [65.8, 2699.0], [65.9, 2701.0], [66.0, 2702.0], [66.1, 2702.0], [66.2, 2708.0], [66.3, 2712.0], [66.4, 2712.0], [66.5, 2714.0], [66.6, 2716.0], [66.7, 2731.0], [66.8, 2733.0], [66.9, 2735.0], [67.0, 2740.0], [67.1, 2753.0], [67.2, 2755.0], [67.3, 2757.0], [67.4, 2759.0], [67.5, 2763.0], [67.6, 2769.0], [67.7, 2778.0], [67.8, 2783.0], [67.9, 2784.0], [68.0, 2784.0], [68.1, 2787.0], [68.2, 2788.0], [68.3, 2789.0], [68.4, 2793.0], [68.5, 2793.0], [68.6, 2795.0], [68.7, 2798.0], [68.8, 2803.0], [68.9, 2805.0], [69.0, 2810.0], [69.1, 2811.0], [69.2, 2811.0], [69.3, 2812.0], [69.4, 2818.0], [69.5, 2823.0], [69.6, 2828.0], [69.7, 2830.0], [69.8, 2831.0], [69.9, 2831.0], [70.0, 2833.0], [70.1, 2834.0], [70.2, 2845.0], [70.3, 2848.0], [70.4, 2854.0], [70.5, 2855.0], [70.6, 2856.0], [70.7, 2863.0], [70.8, 2864.0], [70.9, 2865.0], [71.0, 2865.0], [71.1, 2866.0], [71.2, 2868.0], [71.3, 2869.0], [71.4, 2877.0], [71.5, 2881.0], [71.6, 2881.0], [71.7, 2884.0], [71.8, 2894.0], [71.9, 2898.0], [72.0, 2907.0], [72.1, 2909.0], [72.2, 2910.0], [72.3, 2911.0], [72.4, 2914.0], [72.5, 2915.0], [72.6, 2916.0], [72.7, 2919.0], [72.8, 2928.0], [72.9, 2934.0], [73.0, 2936.0], [73.1, 2940.0], [73.2, 2943.0], [73.3, 2947.0], [73.4, 2954.0], [73.5, 2956.0], [73.6, 2959.0], [73.7, 2961.0], [73.8, 2963.0], [73.9, 2965.0], [74.0, 2965.0], [74.1, 2971.0], [74.2, 2973.0], [74.3, 2975.0], [74.4, 2979.0], [74.5, 2980.0], [74.6, 2989.0], [74.7, 2992.0], [74.8, 2995.0], [74.9, 2997.0], [75.0, 3001.0], [75.1, 3001.0], [75.2, 3007.0], [75.3, 3010.0], [75.4, 3012.0], [75.5, 3015.0], [75.6, 3015.0], [75.7, 3032.0], [75.8, 3035.0], [75.9, 3035.0], [76.0, 3036.0], [76.1, 3036.0], [76.2, 3037.0], [76.3, 3039.0], [76.4, 3039.0], [76.5, 3040.0], [76.6, 3044.0], [76.7, 3047.0], [76.8, 3049.0], [76.9, 3051.0], [77.0, 3051.0], [77.1, 3052.0], [77.2, 3058.0], [77.3, 3061.0], [77.4, 3064.0], [77.5, 3064.0], [77.6, 3073.0], [77.7, 3079.0], [77.8, 3080.0], [77.9, 3080.0], [78.0, 3086.0], [78.1, 3089.0], [78.2, 3091.0], [78.3, 3093.0], [78.4, 3095.0], [78.5, 3095.0], [78.6, 3097.0], [78.7, 3104.0], [78.8, 3109.0], [78.9, 3113.0], [79.0, 3115.0], [79.1, 3115.0], [79.2, 3117.0], [79.3, 3118.0], [79.4, 3126.0], [79.5, 3135.0], [79.6, 3138.0], [79.7, 3138.0], [79.8, 3139.0], [79.9, 3139.0], [80.0, 3140.0], [80.1, 3140.0], [80.2, 3146.0], [80.3, 3165.0], [80.4, 3165.0], [80.5, 3168.0], [80.6, 3168.0], [80.7, 3169.0], [80.8, 3171.0], [80.9, 3174.0], [81.0, 3176.0], [81.1, 3176.0], [81.2, 3179.0], [81.3, 3187.0], [81.4, 3188.0], [81.5, 3189.0], [81.6, 3190.0], [81.7, 3190.0], [81.8, 3191.0], [81.9, 3191.0], [82.0, 3194.0], [82.1, 3195.0], [82.2, 3197.0], [82.3, 3202.0], [82.4, 3204.0], [82.5, 3206.0], [82.6, 3206.0], [82.7, 3211.0], [82.8, 3212.0], [82.9, 3215.0], [83.0, 3216.0], [83.1, 3217.0], [83.2, 3218.0], [83.3, 3225.0], [83.4, 3227.0], [83.5, 3229.0], [83.6, 3229.0], [83.7, 3230.0], [83.8, 3232.0], [83.9, 3234.0], [84.0, 3243.0], [84.1, 3245.0], [84.2, 3248.0], [84.3, 3249.0], [84.4, 3254.0], [84.5, 3263.0], [84.6, 3265.0], [84.7, 3266.0], [84.8, 3267.0], [84.9, 3267.0], [85.0, 3267.0], [85.1, 3279.0], [85.2, 3280.0], [85.3, 3280.0], [85.4, 3281.0], [85.5, 3282.0], [85.6, 3285.0], [85.7, 3287.0], [85.8, 3292.0], [85.9, 3293.0], [86.0, 3298.0], [86.1, 3300.0], [86.2, 3301.0], [86.3, 3302.0], [86.4, 3304.0], [86.5, 3308.0], [86.6, 3311.0], [86.7, 3312.0], [86.8, 3317.0], [86.9, 3318.0], [87.0, 3322.0], [87.1, 3322.0], [87.2, 3324.0], [87.3, 3326.0], [87.4, 3327.0], [87.5, 3329.0], [87.6, 3335.0], [87.7, 3338.0], [87.8, 3339.0], [87.9, 3340.0], [88.0, 3341.0], [88.1, 3344.0], [88.2, 3348.0], [88.3, 3350.0], [88.4, 3354.0], [88.5, 3358.0], [88.6, 3366.0], [88.7, 3366.0], [88.8, 3370.0], [88.9, 3376.0], [89.0, 3379.0], [89.1, 3381.0], [89.2, 3391.0], [89.3, 3403.0], [89.4, 3408.0], [89.5, 3409.0], [89.6, 3414.0], [89.7, 3415.0], [89.8, 3416.0], [89.9, 3420.0], [90.0, 3424.0], [90.1, 3430.0], [90.2, 3432.0], [90.3, 3433.0], [90.4, 3435.0], [90.5, 3442.0], [90.6, 3443.0], [90.7, 3448.0], [90.8, 3451.0], [90.9, 3453.0], [91.0, 3453.0], [91.1, 3459.0], [91.2, 3459.0], [91.3, 3461.0], [91.4, 3462.0], [91.5, 3463.0], [91.6, 3469.0], [91.7, 3469.0], [91.8, 3475.0], [91.9, 3480.0], [92.0, 3482.0], [92.1, 3491.0], [92.2, 3492.0], [92.3, 3502.0], [92.4, 3502.0], [92.5, 3506.0], [92.6, 3509.0], [92.7, 3509.0], [92.8, 3510.0], [92.9, 3513.0], [93.0, 3517.0], [93.1, 3518.0], [93.2, 3520.0], [93.3, 3522.0], [93.4, 3528.0], [93.5, 3536.0], [93.6, 3541.0], [93.7, 3543.0], [93.8, 3560.0], [93.9, 3562.0], [94.0, 3576.0], [94.1, 3578.0], [94.2, 3595.0], [94.3, 3599.0], [94.4, 3600.0], [94.5, 3605.0], [94.6, 3608.0], [94.7, 3610.0], [94.8, 3612.0], [94.9, 3616.0], [95.0, 3616.0], [95.1, 3634.0], [95.2, 3656.0], [95.3, 3664.0], [95.4, 3668.0], [95.5, 3670.0], [95.6, 3673.0], [95.7, 3704.0], [95.8, 3720.0], [95.9, 3731.0], [96.0, 3742.0], [96.1, 3792.0], [96.2, 3797.0], [96.3, 3814.0], [96.4, 3817.0], [96.5, 3818.0], [96.6, 3840.0], [96.7, 3840.0], [96.8, 3848.0], [96.9, 3849.0], [97.0, 3854.0], [97.1, 3948.0], [97.2, 3956.0], [97.3, 3957.0], [97.4, 3978.0], [97.5, 3999.0], [97.6, 4006.0], [97.7, 4035.0], [97.8, 4061.0], [97.9, 4068.0], [98.0, 4075.0], [98.1, 4103.0], [98.2, 4111.0], [98.3, 4117.0], [98.4, 4152.0], [98.5, 4223.0], [98.6, 4227.0], [98.7, 4255.0], [98.8, 4304.0], [98.9, 4338.0], [99.0, 4417.0], [99.1, 4430.0], [99.2, 4472.0], [99.3, 4621.0], [99.4, 4636.0], [99.5, 4690.0], [99.6, 4790.0], [99.7, 4880.0], [99.8, 4912.0], [99.9, 4991.0]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 50.0, "series": [{"data": [[600.0, 19.0], [700.0, 20.0], [800.0, 10.0], [900.0, 13.0], [1000.0, 13.0], [1100.0, 24.0], [1200.0, 18.0], [1300.0, 20.0], [1400.0, 22.0], [1500.0, 45.0], [1600.0, 31.0], [1700.0, 36.0], [1800.0, 39.0], [1900.0, 46.0], [2000.0, 50.0], [2100.0, 43.0], [2200.0, 42.0], [2300.0, 30.0], [2400.0, 39.0], [2500.0, 29.0], [2600.0, 32.0], [2800.0, 32.0], [2700.0, 29.0], [2900.0, 30.0], [3000.0, 38.0], [3100.0, 36.0], [200.0, 2.0], [3200.0, 38.0], [3300.0, 32.0], [3400.0, 30.0], [3500.0, 21.0], [3600.0, 13.0], [3700.0, 6.0], [3800.0, 8.0], [3900.0, 5.0], [4000.0, 5.0], [4300.0, 2.0], [4200.0, 3.0], [4100.0, 4.0], [4600.0, 3.0], [4400.0, 3.0], [300.0, 5.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 2.0], [400.0, 12.0], [500.0, 18.0]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 187.69204152249128, "minX": 1.74128502E12, "maxY": 237.50914205344543, "series": [{"data": [[1.74128502E12, 187.69204152249128], [1.74128508E12, 237.50914205344543]], "isOverall": false, "label": "User Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74128508E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 697.0, "minX": 1.0, "maxY": 4690.0, "series": [{"data": [[2.0, 3448.0], [3.0, 3215.0], [4.0, 3287.0], [5.0, 3189.0], [6.0, 3318.0], [7.0, 3326.0], [8.0, 3165.0], [9.0, 3139.0], [10.0, 3086.0], [11.0, 3279.0], [13.0, 3095.5], [14.0, 2589.0], [15.0, 3095.0], [16.0, 3035.0], [17.0, 3453.0], [18.0, 3459.0], [19.0, 3191.0], [20.0, 3293.0], [21.0, 3188.0], [22.0, 3138.0], [23.0, 2565.0], [24.0, 2444.0], [25.0, 3543.0], [26.0, 2472.0], [27.0, 3469.0], [28.0, 3339.0], [29.0, 3197.0], [30.0, 2478.0], [31.0, 3064.0], [33.0, 2412.0], [32.0, 3482.0], [35.0, 3475.0], [34.0, 3254.0], [37.0, 2466.0], [36.0, 4111.0], [39.0, 3234.0], [38.0, 3204.0], [41.0, 2489.0], [40.0, 2539.0], [43.0, 2934.0], [42.0, 3518.0], [45.0, 3091.0], [47.0, 3109.0], [46.0, 2510.0], [49.0, 3509.0], [48.0, 3280.0], [51.0, 2956.0], [50.0, 3302.0], [53.0, 3462.0], [52.0, 2644.0], [55.0, 3517.0], [54.0, 2681.0], [57.0, 3350.0], [56.0, 3282.0], [58.0, 3039.0], [61.0, 2973.0], [60.0, 2948.0], [63.0, 3010.0], [62.0, 3073.0], [67.0, 2453.0], [66.0, 3298.0], [65.0, 3229.0], [64.0, 2633.0], [71.0, 2506.0], [69.0, 3443.0], [68.0, 3117.0], [75.0, 3595.0], [74.0, 3600.0], [73.0, 2510.0], [72.0, 3341.0], [79.0, 3463.0], [78.0, 2820.5], [76.0, 2514.0], [83.0, 2410.0], [82.0, 2555.0], [81.0, 3311.0], [80.0, 3211.0], [87.0, 2778.0], [86.0, 3634.0], [85.0, 3415.0], [84.0, 2544.0], [91.0, 3322.0], [90.0, 2810.0], [89.0, 2374.0], [88.0, 2520.0], [95.0, 3049.0], [94.0, 3562.0], [93.0, 3391.0], [92.0, 3522.0], [99.0, 2196.0], [98.0, 3704.0], [97.0, 2349.0], [96.0, 3329.0], [103.0, 3720.0], [102.0, 2126.0], [101.0, 2394.0], [100.0, 3432.0], [107.0, 2123.0], [106.0, 2084.0], [105.0, 3348.0], [104.0, 3248.0], [108.0, 933.2], [110.0, 1060.2], [109.0, 909.5], [111.0, 3292.0], [113.0, 852.8333333333334], [112.0, 1359.0], [114.0, 1181.75], [115.0, 770.0], [116.0, 1602.3333333333335], [118.0, 2391.3333333333335], [119.0, 2394.0], [123.0, 1010.4], [122.0, 2296.0], [121.0, 3265.0], [120.0, 3308.0], [124.0, 1120.5], [127.0, 1413.0], [126.0, 2345.0], [125.0, 2070.0], [130.0, 697.0], [131.0, 1831.0], [132.0, 1339.3333333333333], [133.0, 1959.5], [135.0, 1352.0], [134.0, 2184.0], [129.0, 2271.0], [128.0, 3036.0], [140.0, 1054.8333333333335], [138.0, 2054.6666666666665], [139.0, 1491.0], [143.0, 1533.25], [142.0, 1148.25], [141.0, 1244.0], [136.0, 2148.0], [151.0, 1348.5], [150.0, 2940.0], [149.0, 1901.0], [148.0, 3171.0], [147.0, 3285.0], [146.0, 2769.0], [145.0, 3335.0], [144.0, 2965.0], [155.0, 2084.5], [156.0, 2023.5], [159.0, 1593.5], [158.0, 1477.0], [157.0, 1961.5], [154.0, 3036.0], [153.0, 2936.0], [152.0, 3322.0], [160.0, 1254.8], [161.0, 1214.3333333333333], [162.0, 1808.3333333333335], [163.0, 1253.0], [164.0, 1850.6666666666665], [165.0, 1178.5714285714287], [166.0, 1364.2], [167.0, 1518.3333333333335], [168.0, 1810.75], [169.0, 1885.0], [173.0, 1482.5555555555554], [172.0, 2369.5], [175.0, 1648.6666666666665], [174.0, 2763.0], [171.0, 1543.0], [170.0, 2716.0], [177.0, 2184.5], [176.0, 1847.2], [179.0, 2397.0], [181.0, 1984.25], [182.0, 2793.0], [180.0, 2702.0], [178.0, 3327.0], [185.0, 1741.5], [186.0, 1894.0], [187.0, 2443.5], [189.0, 1540.4], [190.0, 1582.857142857143], [191.0, 3338.0], [188.0, 2828.0], [184.0, 3230.5], [193.0, 1666.75], [192.0, 2087.5], [195.0, 1928.0], [194.0, 2003.0], [197.0, 2052.75], [196.0, 1447.0], [198.0, 1850.0], [199.0, 2270.5], [203.0, 1516.1250000000002], [202.0, 2634.0], [204.0, 1634.875], [205.0, 1770.3636363636363], [206.0, 1954.6666666666667], [207.0, 2868.0], [201.0, 2882.0], [209.0, 1776.8], [208.0, 2377.5], [215.0, 2587.0], [214.0, 3300.0], [213.0, 2811.0], [212.0, 3091.0], [211.0, 3379.0], [210.0, 2971.0], [221.0, 1741.3333333333335], [220.0, 2421.0], [219.0, 2418.5], [223.0, 2048.3333333333335], [222.0, 1811.0], [218.0, 2639.0], [217.0, 2338.0], [216.0, 3032.0], [224.0, 2380.0], [231.0, 2209.0], [230.0, 1954.4], [229.0, 2333.5], [228.0, 1985.8], [227.0, 3012.0], [226.0, 3001.0], [225.0, 2647.0], [236.0, 1968.4], [239.0, 2497.0], [238.0, 1947.6], [237.0, 1841.2222222222222], [235.0, 2245.0], [234.0, 2089.75], [233.0, 1667.0], [232.0, 2285.5], [241.0, 2114.714285714286], [243.0, 1988.0], [242.0, 1881.0], [247.0, 2761.5], [246.0, 2194.75], [245.0, 3420.0], [244.0, 3451.0], [240.0, 2910.0], [252.0, 2011.7999999999997], [251.0, 1925.6666666666667], [250.0, 1860.25], [249.0, 2033.142857142857], [248.0, 2516.333333333333], [255.0, 2173.4999999999995], [254.0, 2698.6], [253.0, 2220.0], [258.0, 2548.3333333333335], [256.0, 1881.0], [259.0, 2618.5], [268.0, 3130.5], [271.0, 2606.0], [270.0, 3435.0], [269.0, 2963.0], [260.0, 2281.0], [261.0, 3859.5], [257.0, 2219.0], [264.0, 2646.25], [263.0, 2511.75], [262.0, 2907.5], [265.0, 2797.0], [267.0, 3506.0], [266.0, 4690.0], [273.0, 2217.7272727272725], [274.0, 2337.6666666666665], [272.0, 2393.6666666666665], [275.0, 2869.666666666667], [276.0, 3166.2], [278.0, 2392.6], [279.0, 3219.4], [277.0, 3237.25], [280.0, 3091.3333333333335], [281.0, 3118.0], [283.0, 3985.6666666666665], [282.0, 3569.0], [287.0, 3321.3333333333335], [286.0, 3139.0], [285.0, 3453.0], [284.0, 3430.0], [290.0, 3608.4], [292.0, 2126.222222222222], [291.0, 2666.8], [300.0, 3656.0], [293.0, 2738.6666666666665], [295.0, 2220.6666666666665], [289.0, 2813.6666666666665], [294.0, 2966.166666666667], [297.0, 2337.25], [299.0, 2907.25], [298.0, 3442.0], [296.0, 2262.5], [301.0, 2240.0], [302.0, 2490.6666666666665], [303.0, 2513.6], [305.0, 2157.1428571428573], [304.0, 2648.0], [306.0, 2846.166666666667], [309.0, 1672.6666666666667], [308.0, 2652.5384615384614], [307.0, 2283.8], [311.0, 2280.222222222222], [310.0, 2516.3333333333335], [312.0, 2792.1818181818185], [319.0, 1840.0], [318.0, 2109.3333333333335], [317.0, 1724.0], [316.0, 1907.3333333333333], [313.0, 2564.1249999999995], [314.0, 2252.2], [315.0, 2439.6], [322.0, 2301.3333333333335], [326.0, 2171.625], [325.0, 2505.2], [327.0, 2428.769230769231], [324.0, 2561.3999999999996], [323.0, 2592.6], [332.0, 2463.866666666667], [334.0, 2587.3333333333335], [335.0, 2432.857142857143], [333.0, 2223.4999999999995], [321.0, 2264.5], [320.0, 2313.0], [328.0, 2061.3333333333335], [329.0, 2656.3333333333335], [330.0, 2104.8333333333335], [331.0, 2671.909090909091], [336.0, 1831.3333333333335], [337.0, 1950.5714285714287], [338.0, 2026.5], [339.0, 2097.0], [1.0, 3366.0]], "isOverall": false, "label": "14 Register Request", "isController": false}, {"data": [[223.11199999999985, 2270.2930000000015]], "isOverall": false, "label": "14 Register Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 339.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1356.8166666666666, "minX": 1.74128502E12, "maxY": 4159.35, "series": [{"data": [[1.74128502E12, 1690.65], [1.74128508E12, 4159.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74128502E12, 1356.8166666666666], [1.74128508E12, 3338.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74128508E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1323.2975778546718, "minX": 1.74128502E12, "maxY": 2655.2180028129374, "series": [{"data": [[1.74128502E12, 1323.2975778546718], [1.74128508E12, 2655.2180028129374]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74128508E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1321.7750865051908, "minX": 1.74128502E12, "maxY": 2654.4374120956377, "series": [{"data": [[1.74128502E12, 1321.7750865051908], [1.74128508E12, 2654.4374120956377]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74128508E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5414908579465539, "minX": 1.74128502E12, "maxY": 3.0865051903114233, "series": [{"data": [[1.74128502E12, 3.0865051903114233], [1.74128508E12, 0.5414908579465539]], "isOverall": false, "label": "14 Register Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74128508E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 545.0, "minX": 31.0, "maxY": 3165.0, "series": [{"data": [[48.0, 2861.5], [54.0, 852.0], [61.0, 1605.0], [66.0, 2267.0], [68.0, 1274.0], [75.0, 1934.0], [82.0, 2615.0], [85.0, 2137.0], [90.0, 3025.5], [105.0, 2102.0], [115.0, 3165.0], [120.0, 3147.0], [31.0, 545.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 120.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 541.0, "minX": 31.0, "maxY": 3165.0, "series": [{"data": [[48.0, 2838.5], [54.0, 852.0], [61.0, 1604.0], [66.0, 2267.0], [68.0, 1273.5], [75.0, 1934.0], [82.0, 2614.5], [85.0, 2137.0], [90.0, 3025.5], [105.0, 2102.0], [115.0, 3165.0], [120.0, 3147.0], [31.0, 541.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 120.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.3, "minX": 1.74128502E12, "maxY": 8.366666666666667, "series": [{"data": [[1.74128502E12, 8.3], [1.74128508E12, 8.366666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74128508E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.816666666666666, "minX": 1.74128502E12, "maxY": 11.85, "series": [{"data": [[1.74128502E12, 4.816666666666666], [1.74128508E12, 11.85]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74128508E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.816666666666666, "minX": 1.74128502E12, "maxY": 11.85, "series": [{"data": [[1.74128502E12, 4.816666666666666], [1.74128508E12, 11.85]], "isOverall": false, "label": "14 Register Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74128508E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.816666666666666, "minX": 1.74128502E12, "maxY": 11.85, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74128502E12, 4.816666666666666], [1.74128508E12, 11.85]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74128508E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

