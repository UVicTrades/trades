networks:
  trade_network:
    driver: bridge

services:
  # frontend:
  #   build:
  #     context: apps/frontend
  #   restart: unless-stopped
  #   depends_on: []
  #   volumes: [ ./apps/frontend/src:/app/src ]
  #   ports: [ 8100:8100 ]
  #   environment:
  #     PORT: 8100
  #   networks:
  #     - trade_network

  # proxy:
  #   build: apps/proxy
  #   container_name: trade_proxy
  #   restart: unless-stopped
  #   depends_on: []
  #   volumes: [ ./apps/proxy:/app ]
  #   environment: []
  #   ports: [ 80:80, 443:443 ]
  #   networks:
  #     - trade_network

  backend:
    build:
      context: apps/backend
    restart: unless-stopped
    depends_on: []
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip
    environment:
      PORT: 8200
      DB_URL: jdbc:postgresql://database:5432/trade
      DB_USERNAME: trade
      DB_PASSWORD: trade
    networks:
      - trade_network

  load-balancer:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./apps/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - trade_network

  rabbit:
    image: rabbitmq:3
    networks:
      - trade_network
    ports: [ "5672:5672" ]


  matching-1:
    build:
      context: apps/matching
    environment:
      MATCHING_RPC_QUEUE_SHARD-ID: 1
    networks:
      - trade_network

  matching-2:
    build:
      context: apps/matching
    environment:
      MATCHING_RPC_QUEUE_SHARD-ID: 2
    networks:
      - trade_network

  database:
    image: postgres:17
    container_name: trade_database
    restart: unless-stopped
    depends_on: []
    volumes:
      - ./apps/data/database/postgres_data:/var/lib/postgresql/data
    ports: [5432:5432]
    environment:
      - POSTGRES_USER=trade
      - POSTGRES_PASSWORD=trade
      - POSTGRES_DB=trade
    networks:
      - trade_network
